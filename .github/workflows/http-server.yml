# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: http-server CI

on:
  push:
    branches: ["server"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    working-directory: ./server
jobs:

  build_and_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: mydevpassword
          POSTGRES_USER: myadmin
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DATABASE_URL: postgres://myadmin:mydevpassword@localhost:5432/mydatabase
      DATABASE_POOL_MAX_SIZE: 5
      APP_ENVIRONMENT: development
      LISTEN_PORT: 8020

    steps:
      - uses: ./.github/workflows/setup-rust.yml
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Sqlx
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres && sqlx migrate run
      - name: Run Rustfmt & Clippy # Check code formatting && Run Clippy and treat warnings as errors
        run: cargo fmt -- --check && cargo clippy --all-targets --all-features -- -D warnings
      - name: Build Project
        run: cargo build --verbose # Build the project in debug mode
      - name: Run Tests
        run: cargo test --all-features --verbose # Run all tests with features enabled

  release:
    runs-on: ubuntu-latest

    steps:
      - name: Build Release Project
        run: cargo build --release
